@{
    ViewData["Title"] = "Home Page";
}

<style>
    :root {
        --primary-color: #1e113a;
        --secondary-color: #52f3ea;
        --tertiary-color: #fffef7;
        --accent-color: #52f3ea;
    }

    body {
        background-color: var(--primary-color);
        color: var(--tertiary-color);
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', sans-serif;
    }

    .main-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 40px 20px;
    }

    .content-grid {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        gap: 60px;
        flex-wrap: wrap;
        margin-top: 30px;
    }

    .left-panel {
        display: flex;
        flex-direction: column;
        gap: 30px;
        align-items: center;
    }

    .main-button {
        background-color: var(--secondary-color);
        color: var(--primary-color);
        border: none;
        padding: 24px 60px;
        font-size: 26px;
        border-radius: 16px;
        cursor: pointer;
        min-width: 300px;
        box-shadow: 0 8px 18px rgba(82, 243, 234, 0.3);
        transition: 0.3s;
        font-weight: bold;
        text-align: center;
        text-decoration: none;
    }

        .main-button:hover {
            background-color: var(--accent-color);
            transform: scale(1.03);
        }

    .half-buttons-row {
        display: flex;
        gap: 20px;
        flex-wrap: wrap;
        justify-content: center;
    }

    .half-button {
        background-color: var(--secondary-color);
        color: var(--primary-color);
        border: none;
        padding: 18px 32px;
        font-size: 20px;
        border-radius: 12px;
        cursor: pointer;
        min-width: 140px;
        text-align: center;
        text-decoration: none;
        font-weight: 500;
        transition: background-color 0.3s, transform 0.3s;
        box-shadow: 0 4px 12px rgba(82, 243, 234, 0.2);
    }

        .half-button:hover {
            background-color: var(--accent-color);
            transform: translateY(-3px);
        }

    .right-panel {
        display: flex;
        flex-direction: column;
        gap: 20px;
        align-items: center;
    }

    .tile-row {
        display: flex;
        gap: 20px;
        flex-wrap: wrap;
        justify-content: center;
    }

    .tile:hover .tile-icon,
    .tile:hover .tile-label {
        color: var(--secondary-color);
    }

    .tile {
        background: rgba(255, 255, 255, 0.07);
        border: 2px solid var(--secondary-color);
        border-radius: 20px;
        padding: 30px;
        width: 240px;
        text-align: center;
        color: var(--tertiary-color);
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 6px 18px rgba(0, 0, 0, 0.25);
        text-decoration: none;
    }

        .tile:hover {
            background-color: rgba(255, 255, 255, 0.13);
            transform: translateY(-4px);
        }

    .tile-icon {
        font-size: 60px;
        margin-bottom: 10px;
    }

    .tile-label {
        font-size: 18px;
        line-height: 1.4;
        font-weight: 600;
    }
</style>

@if (User.Identity != null && User.Identity.IsAuthenticated)
{
    <div class="main-container">
        <div class="content-grid">

            <!-- Left Panel -->
            <div class="left-panel">
                <a class="main-button" href="@Url.Action("Countdown", "Exercise", new { id = 0 })">Start General Training</a>

                <div class="half-buttons-row">
                    <a class="half-button" href="@Url.Action("Countdown", "Exercise", new { id = 1 })">Squats</a>
                    <a class="half-button" href="@Url.Action("Countdown", "Exercise", new { id = 200 })">Push Ups</a>
                    <a class="half-button" href="@Url.Action("Countdown", "Exercise", new { id = 666 })">Bench Press</a>
                    <a class="half-button" href="@Url.Action("Countdown", "Exercise", new { id = 3 })">Planks</a>
                    <a class="half-button" href="@Url.Action("Countdown", "Exercise", new { id = 4 })">Bicep Curl</a>
                    <a class="half-button" href="@Url.Action("Countdown", "Exercise", new { id = 888 })">Front Raises</a>
                    <a class="half-button" href="@Url.Action("Countdown", "Exercise", new { id = 400 })">Leg Raises</a>
                    <a class="half-button" href="@Url.Action("Countdown", "Exercise", new { id = 500 })">Pull Ups</a>
                    <a class="half-button" href="@Url.Action("Countdown", "Exercise", new { id = 2 })">Jumping Jacks</a>
                </div>
            </div>

            <!-- Right Panel -->
            <div class="right-panel">
                <div class="tile-row">
                    <!-- Camera/Video Toggle Tile -->
                    <div class="tile" id="cameraToggleTile" onclick="toggleCameraVideoMode()">
                        <div class="tile-icon" id="tileIcon">📷</div>
                        <div class="tile-label" id="tileLabel">Camera is Selected<br />[Click to select Video]</div>
                        <input type="file" id="videoInput" accept="video/*" style="display: none;" onchange="handleVideoSelection(event)" />
                    </div>

                    <!-- History Tile -->
                    <a class="tile" href="@Url.Action("TrainingHistory", "Performance")">
                        <div class="tile-icon">📊</div>
                        <div class="tile-label">History & Stats</div>
                    </a>
                </div>
            </div>

        </div>
    </div>
}
else
{
    <div class="main-container">
        <h1 style="font-size: 38px; color: var(--tertiary-color); text-align: center;">Welcome to GEMS</h1>
        <p style="font-size: 20px; margin-top: 10px; color: rgba(255,255,255,0.8); text-align: center;">
            Please log in to begin your training journey with guided exercises, history tracking, and more.
        </p>
    </div>
}

<script>
    let isCameraSelected = true; // Default: Camera mode
    let pollingInterval = null;
    let videoBeingUploaded = true;

    function toggleCameraVideoMode() {
        if (isCameraSelected) {
            const videoInput = document.getElementById('videoInput');
            videoInput.value = ""; // Clear previous file
            videoInput.click();
        } else {
            isCameraSelected = true;
            updateTileDisplay(); // Immediately update UI
            sendTriggerToPython("camera-mode-selection", "webcam", null);
        }
    }

    function handleVideoSelection(event) {
        const file = event.target.files[0];
        if (file) {
            isCameraSelected = false;
            updateTileDisplay(); // Show "Video is selected" immediately
            sendTriggerToPython("camera-mode-selection", "video", file);
        }
    }

    function updateTileDisplay(videoBeingUploaded =true) {
        const label = document.getElementById("tileLabel");
        const icon = document.getElementById("tileIcon");

        if (isCameraSelected) {
            label.innerHTML = "Camera is selected<br />[Click to select Video]";
            icon.innerText = "📷";
        } else if (videoBeingUploaded) {
            label.innerHTML = "Uploading Video<br />[Click to select Camera]";
            icon.innerText = "⏳";
        } else {
            label.innerHTML = "Video is selected<br />[Click to select Camera]";
            icon.innerText = "🎥";
        }
    }

    async function sendTriggerToPython(trigger, mode, file) {
        const formData = new FormData();
        formData.append("trigger", trigger);
        formData.append("camera-mode", mode);

        if (file) {
            formData.append("video-file", file);
        }

        try {
            const response = await fetch("http://127.0.0.1:5000/start", {
                method: "POST",
                body: formData
            });

            const data = await response.text();
            console.log("Python response:", data);

            if (mode === "video") {
                // Start polling only after sending video
                startPollingVideoStatus();
            }
        } catch (error) {
            console.error("Error sending trigger:", error);
        }
    }

    function startPollingVideoStatus() {
        if (pollingInterval) clearInterval(pollingInterval);

        pollingInterval = setInterval(async () => {
            try {
                const response = await fetch("http://127.0.0.1:5000/status");
                const statusData = await response.json();
                console.log("Status:", statusData);

                const videoBeingUploaded = statusData.video_being_uploaded;
                updateTileDisplay(videoBeingUploaded);

                if (!videoBeingUploaded) {
                    // Stop polling when upload finishes
                    clearInterval(pollingInterval);
                    pollingInterval = null;
                }
            } catch (error) {
                console.error("Error fetching status:", error);
            }
        }, 3000); // Poll every 3 seconds
    }
</script>
