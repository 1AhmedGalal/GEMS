@model GEMS.ViewModels.ProfileViewModels.TrainingHistoryViewModel

@{
    ViewData["Title"] = "Training History";

    // Group for bar chart (only exercises done more than once)
    var aggregated = Model.Exercises
        .GroupBy(e => e.ExerciseName)
        .Where(g => g.Count() > 1)
        .Select(g => new
        {
            Name = g.Key,
            TotalReps = g.Sum(e => e.TotalRepsPlayed),
            TotalMistakes = g.Sum(e => e.TotalMistakesMade)
        })
        .ToList();

    var exerciseNamesBar = string.Join(",", aggregated.Select(a => $"'{a.Name}'"));
    var totalMistakes = string.Join(",", aggregated.Select(a => a.TotalMistakes));
    var totalCorrect = string.Join(",", aggregated.Select(a => a.TotalReps)); // Correct = TotalReps

    // Frequency chart (all exercises)
    var frequencyData = Model.Exercises
        .GroupBy(e => e.ExerciseName)
        .Select(g => new
        {
            Name = g.Key,
            Count = g.Count()
        })
        .ToList();

    var exerciseNamesDonut = string.Join(",", frequencyData.Select(f => $"'{f.Name}'"));
    var frequencyCounts = string.Join(",", frequencyData.Select(f => f.Count));
}

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<style>
    .table-row-hidden {
        opacity: 0;
        transform: translateY(-10px);
        transition: all 0.3s ease;
    }

    .table-row-visible {
        opacity: 1;
        transform: translateY(0);
    }
</style>

<div class="container mt-5" style="color: #1e113a;">
    <div class="text-center mb-4">
        <h2 style="color: var(--primary-color); border-bottom: 2px solid var(--accent-color); display: inline-block; padding-bottom: 5px;">
            Training History & Stats for @Model.Username
        </h2>
    </div>

    @if (Model.Exercises.Any())
    {
        <!-- Stats in Bento Grid -->
        <div class="row g-4 mb-5">
            <!-- Bar Chart -->
            <div class="col-md-6">
                <div class="shadow p-3 rounded" style="background-color: #1a1a2e;">
                    <h5 class="text-center text-light mb-3">Mistakes vs Total Reps</h5>
                    <canvas id="mistakeChart" height="250"></canvas>
                </div>
            </div>

            <!-- Doughnut Chart -->
            <div class="col-md-6">
                <div class="shadow p-3 rounded" style="background-color: #1a1a2e;">
                    <h5 class="text-center text-light mb-3">Exercise Frequency</h5>
                    <canvas id="frequencyChart" height="250"></canvas>
                </div>
            </div>

            @if (ViewBag.ChatAdvice != null)
            {
                <div class="row g-4 mt-4">
                    <div id="ai-advice-area" class="col-12 shadow p-4 rounded" style="background-color: #1a1a2e; color: #ffffff; position: relative;">
                        <h5 class="mb-3">💡 AI-Powered Fitness Advice</h5>
                        <ul>
                            @{
                                var adviceText = ViewBag.ChatAdvice.ToString();
                                var allLines = adviceText.Split('\n');
                                var bulletCount = 0;

                                for (int i = 1; i < allLines.Length && bulletCount < 5; i++)
                                {
                                    var line = allLines[i].TrimStart('-', '*', '•', ' ').Trim();

                                    if (!string.IsNullOrWhiteSpace(line) && line.Length > 20)
                                    {
                                        <li>@line</li>
                                        bulletCount++;
                                    }
                                }
                            }
                        </ul>
                        <button id="more-info-btn" class="btn mt-3 d-block mx-auto fw-bold table-toggle-btn"
                                style="background-color: var(--secondary-color); color: black; border: none;">
                            Have A Question?
                        </button>
                    </div>
                </div>
            }

            <script>
                document.getElementById('more-info-btn').addEventListener('click', function () {
                    setTimeout(() => {
                        window.location.href = '@Url.Action("AskQuestion", "Performance")';
                    }, 800);
                });
            </script>

            <!-- Toggle Table Button -->
            <button id="toggle-table-btn" class="btn mt-4 d-block mx-auto fw-bold table-toggle-btn"
                    style="background-color: #1a1a2e; color: white; border: none;">
                Show Training Table
            </button>

            <style>
                .table-toggle-btn {
                    transition: all 0.3s ease;
                    padding: 12px 24px;
                    border-radius: 8px;
                }

                .table-toggle-btn:hover {
                        background-color: #343a40; /* slightly lighter dark */
                        transform: scale(1.05); /* zoom effect */
                        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4); /* subtle shadow */
                }
            </style>
        </div>

        

        <!-- Training Table (Hidden by Default) -->
        <div id="training-table-container" class="table-responsive shadow rounded mb-5"
             style="background-color: var(--primary-color); display: none;">
            <table class="table table-bordered training-table" style="color: var(--tertiary-color);">
                <thead style="background-color: var(--secondary-color); color: var(--primary-color);">
                    <tr>
                        <th>Exercise</th>
                        <th>Reps</th>
                        <th>Mistakes</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var exercise in Model.Exercises)
                    {
                        <tr class="table-row-hidden">
                            <td>@exercise.ExerciseName</td>
                            @if (exercise.ExerciseName == "Planks")
                            {
                                <td>1 (lasted @exercise.TotalRepsPlayed seconds)</td>
                            }
                            else
                            {
                                <td>@exercise.TotalRepsPlayed</td>
                            }
                            <td>@exercise.TotalMistakesMade</td>
                            <td>@exercise.DateTime.ToString("yyyy-MM-dd HH:mm")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Bar Chart Script -->
        <script>
            const mistakeCtx = document.getElementById('mistakeChart').getContext('2d');
            new Chart(mistakeCtx, {
                type: 'bar',
                data: {
                    labels: [@Html.Raw(exerciseNamesBar)],
                    datasets: [
                        {
                            label: 'Total Reps',
                            data: [@Html.Raw(totalCorrect)],
                            backgroundColor: 'rgba(54, 162, 235, 0.7)'
                        },
                        {
                            label: 'Mistakes',
                            data: [@Html.Raw(totalMistakes)],
                            backgroundColor: 'rgba(201, 48, 44, 0.7)'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: {
                                color: 'white'
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: 'white' },
                            title: {
                                display: true,
                                text: 'Exercise',
                                color: 'white'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: { color: 'white' },
                            title: {
                                display: true,
                                text: 'Count',
                                color: 'white'
                            }
                        }
                    }
                }
            });
        </script>

        <!-- Doughnut Chart Script -->
        <script>
            const frequencyCtx = document.getElementById('frequencyChart').getContext('2d');
            new Chart(frequencyCtx, {
                type: 'doughnut',
                data: {
                    labels: [@Html.Raw(exerciseNamesDonut)],
                    datasets: [{
                        label: 'Times Played',
                        data: [@Html.Raw(frequencyCounts)],
                        backgroundColor: [
                            '#343a40', '#495057', '#6c757d', '#adb5bd',
                            '#1f2937', '#2d3748', '#4a5568', '#718096'
                        ],
                        hoverOffset: 8
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            labels: {
                                color: 'white'
                            },
                            position: 'bottom'
                        }
                    }
                }
            });
        </script>

        <!-- Training Table Animation Script -->
        <script>
            document.getElementById('toggle-table-btn').addEventListener('click', function () {
                const container = document.getElementById('training-table-container');
                const rows = container.querySelectorAll('.table-row-hidden');
                let delay = 0;

                if (container.style.display === 'none') {
                    container.style.display = 'block';
                    rows.forEach((row, index) => {
                        setTimeout(() => {
                            row.classList.add('table-row-visible');
                        }, delay);
                        delay += 100; // 100ms delay between rows
                    });
                    this.textContent = "Hide Training Table";
                } else {
                    rows.forEach(row => row.classList.remove('table-row-visible'));
                    setTimeout(() => {
                        container.style.display = 'none';
                    }, 500); // Wait for animation to complete
                    this.textContent = "Show Training Table";
                }
            });
        </script>
    }
    else
    {
        <div class="alert text-center shadow p-3 rounded" style="background-color: var(--accent-color); color: var(--primary-color);">
            No training history found. Start exercising to track your progress!
        </div>
    }
</div>
