@{
    ViewBag.Title = "Exercise Classification";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Exercise Classification</title>
    <style>
        :root {
            --primary-color: #1e113a;
            --secondary-color: #52f3ea;
            --tertiary-color: #fffef7;
        }

        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background: var(--primary-color);
            color: var(--tertiary-color);
            padding: 20px;
            margin: 0;
        }

        h2 {
            margin-top: 20px;
            color: var(--secondary-color);
        }

        .status {
            font-size: 24px;
            margin-top: 30px;
            background-color: var(--tertiary-color);
            color: var(--primary-color);
            display: inline-block;
            padding: 30px 40px;
            border-radius: 15px;
            box-shadow: 0 0 15px rgba(82, 243, 234, 0.4);
            width: 70%;
            font-weight: bold;
            white-space: pre-line;
        }

        .frame-wrapper {
            position: relative;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 40px;
        }

        .frame-container {
            max-height: 800px;
            overflow: hidden;
        }

        img {
            max-width: 80%;
            height: auto;
            border: 3px solid var(--secondary-color);
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(82, 243, 234, 0.6);
        }

        .counter-left, .counter-right {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            background-color: var(--tertiary-color);
            color: var(--primary-color);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 0 15px rgba(82, 243, 234, 0.4);
            font-size: 36px;
            font-weight: bold;
            width: 160px;
            text-align: center;
            z-index: 10;
        }

        .counter-left {
            left: 15%;
        }

        .counter-right {
            right: 15%;
        }

        .back-btn {
            margin-top: 30px;
            padding: 12px 24px;
            background-color: var(--secondary-color);
            color: var(--primary-color);
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .back-btn:hover {
                background-color: #3fd3c8;
            }
    </style>
</head>
<body>
    <h2>Exercise Classification Live Feed</h2>

    <!-- Status Box -->
    <div class="status" id="statusText">Please start doing the exercise.</div>

    <!-- Frame and Counters -->
    <div class="frame-wrapper">
        <div class="counter-left" id="counterLeft" style="display:none;">0</div>
        <div class="frame-container">
            <img id="liveFrame" src="" alt="Live frame not loaded" />
        </div>
        <div class="counter-right" id="counterRight" style="display:none;">0</div>
    </div>

    <!-- Back Button -->
    <button class="back-btn" onclick="handleBackToHome()">Back to Home</button>

    <script>
        let lastAction = null;
        let leftCount = 0;
        let rightCount = 0;
        let totalReps = 0;
        let totalMistakes = 0;

        const EXERCISE_IDS = {
            bodyweightsquats: 1,
            jumpingjack: 2,
            pullups: 3,
            pushups: 4,
            plank: 5,
            curl: 6
        };

        window.onload = () => {
            startClassification();
            setInterval(fetchStatus, 100);
        };

        async function startClassification() {
            try {
                await fetch("/Exercise/Classification", { method: "POST" });
            } catch (err) {
                console.error("Failed to start Flask classification backend:", err);
            }
        }

        async function fetchStatus() {
            try {
                const response = await fetch("http://127.0.0.1:5000/status");
                const data = await response.json();

                if (data.frame) {
                    document.getElementById("liveFrame").src = "data:image/jpeg;base64," + data.frame;
                }

                const statusBox = document.getElementById("statusText");

                if (!data.final_action || data.final_action === "None") {
                    statusBox.innerText = "Keep playing so we can identify the exercise...";
                    resetColorsToDefault();
                    return;
                }

                lastAction = data.final_action.toLowerCase();
                let feedback = "Evaluating Exercise...";
                let hasBadForm = false;

                // Reset visibility
                document.getElementById("counterLeft").style.display = "none";
                document.getElementById("counterRight").style.display = "none";

                if (lastAction === "curl") {
                    leftCount = data.bicep_left_count ?? 0;
                    rightCount = data.bicep_right_count ?? 0;
                    const badLeft = parseInt(data.bicep_bad_left_form) === 1;
                    const badRight = parseInt(data.bicep_bad_right_form) === 1;
                    hasBadForm = badLeft || badRight;

                    feedback = `Exercise: Bicep Curl`;
                    if (badLeft) feedback += `\nLeft Arm: Wrong Form`;
                    if (badRight) feedback += `\nRight Arm: Wrong Form`;

                    document.getElementById("counterLeft").innerText = leftCount;
                    document.getElementById("counterRight").innerText = rightCount;
                    document.getElementById("counterLeft").style.display = "block";
                    document.getElementById("counterRight").style.display = "block";

                    totalReps = leftCount + rightCount;
                    totalMistakes = (badLeft ? 1 : 0) + (badRight ? 1 : 0);
                }

                else if (lastAction === "bodyweightsquats") {
                    const counter = data.counter ?? 0;
                    const err = data.error;
                    hasBadForm = err && err !== "None";

                    feedback = `Exercise: Squats`;
                    if (hasBadForm) feedback += `\nFeedback: ${err}`;

                    document.getElementById("counterLeft").innerText = counter;
                    document.getElementById("counterLeft").style.display = "block";

                    totalReps = counter;
                    totalMistakes = hasBadForm ? 1 : 0;
                }

                else if (lastAction === "jumpingjack") {
                    const counter = data.counter_jumping ?? 0;
                    const err = data.error_jumping;
                    hasBadForm = err && err !== "None";

                    feedback = `Exercise: Jumping Jacks`;
                    if (hasBadForm) feedback += `\nFeedback: ${err}`;

                    document.getElementById("counterLeft").innerText = counter;
                    document.getElementById("counterLeft").style.display = "block";

                    totalReps = counter;
                    totalMistakes = hasBadForm ? 1 : 0;
                }

                else if (lastAction === "pushups") {
                    const counter = data.counter_pushup ?? 0;
                    const err = data.error_pushup;
                    hasBadForm = err && err !== "None";

                    feedback = `Exercise: Pushups`;
                    if (hasBadForm) feedback += `\nFeedback: ${err}`;

                    document.getElementById("counterLeft").innerText = counter;
                    document.getElementById("counterLeft").style.display = "block";

                    totalReps = counter;
                    totalMistakes = hasBadForm ? 1 : 0;
                }

                else if (lastAction === "pullups") {
                    const counter = data.pullup_count ?? 0;
                    const err = data.pullup_bad_form;
                    hasBadForm = err && err !== "None";

                    feedback = `Exercise: Pullups`;
                    if (hasBadForm) feedback += `\nFeedback: ${err}`;

                    document.getElementById("counterLeft").innerText = counter;
                    document.getElementById("counterLeft").style.display = "block";

                    totalReps = counter;
                    totalMistakes = hasBadForm ? 1 : 0;
                }

                else if (lastAction === "plank") {
                    stopClassification().then(() => {
                        window.location.href = "/Exercise/LivePlank";
                    });
                    return;
                }

                // Update feedback text and style
                statusBox.innerText = feedback;

                const root = document.documentElement;
                if (hasBadForm) {
                    root.style.setProperty('--secondary-color', '#000000');
                    root.style.setProperty('--tertiary-color', '#ffffff');
                    document.body.style.backgroundColor = '#8B0000';
                } else {
                    resetColorsToDefault();
                }

            } catch (err) {
                console.error("Error fetching status:", err);
            }
        }

        function resetColorsToDefault() {
            const root = document.documentElement;
            root.style.setProperty('--secondary-color', '#52f3ea');
            root.style.setProperty('--tertiary-color', '#fffef7');
            document.body.style.backgroundColor = '#1e113a';
        }


        async function saveExerciseData() {
            if (!lastAction || lastAction === "plank") return;
            const exerciseId = EXERCISE_IDS[lastAction] ?? null;
            if (!exerciseId) return;

            try {
                const response = await fetch("/Exercise/SaveExerciseData", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        exerciseId: exerciseId,
                        totalRepsPlayed: totalReps,
                        totalMistakesMade: totalMistakes
                    })
                });

                const result = await response.json();
                console.log("Save result:", result);
            } catch (err) {
                console.error("Failed to save exercise data:", err);
            }
        }

        async function stopClassification() {
            try {
                const response = await fetch("http://127.0.0.1:5000/start", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ trigger: "stop" })
                });
                return await response.json();
            } catch (err) {
                console.error("Error stopping classification:", err);
            }
        }

        async function handleBackToHome() {
            await stopClassification();
            await saveExerciseData();
            window.location.href = '/Home/Index';
        }
    </script>
</body>
</html>
